#!/bin/bash

set -euo pipefail

# https://github.com/calmh/smartos-platform-upgrade
# Copyright (c) 2012-2016 Jakob Borg & Contributors
# Distributed under the MIT License

# us-east.manta.joyent.com currently uses a wildcard certificate based on the
# Thawte Primary Root CA.
# SHA-1=91:C6:D6:EE:3E:8A:C8:63:84:E5:48:C2:99:29:5C:75:6C:81:7B:81
# SHA-256=8D:72:2F:81:A9:C1:13:C0:79:1D:F1:36:A2:96:6D:B2:6C:95:0A:97:1D:B4:6B:41:99:F4:EA:54:B7:8B:FB:9F

main() {
  create_cert_file
  set_exit_trap
  process_cmd_line "$@"
  initialize
  check_kernel_version
  create_temp_dir
  download_latest_platform
  verify_platform_checksum
  extract_platform
  mark_release_version
  check_boot_device
  mount_boot_device
  update_platform
  remount_boot_device
  verify_kernel_checksum
  verify_boot_archive_checksum
  activate_platform
  display_completion_message
}

create_cert_file() {
  cert_file=$(mktemp)
  cat >"$cert_file" <<EOF
-----BEGIN CERTIFICATE-----
MIIEIDCCAwigAwIBAgIQNE7VVyDV7exJ9C/ON9srbTANBgkqhkiG9w0BAQUFADCB
qTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5jLjEoMCYGA1UECxMf
Q2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYGA1UECxMvKGMpIDIw
MDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNlIG9ubHkxHzAdBgNV
BAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwHhcNMDYxMTE3MDAwMDAwWhcNMzYw
NzE2MjM1OTU5WjCBqTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDHRoYXd0ZSwgSW5j
LjEoMCYGA1UECxMfQ2VydGlmaWNhdGlvbiBTZXJ2aWNlcyBEaXZpc2lvbjE4MDYG
A1UECxMvKGMpIDIwMDYgdGhhd3RlLCBJbmMuIC0gRm9yIGF1dGhvcml6ZWQgdXNl
IG9ubHkxHzAdBgNVBAMTFnRoYXd0ZSBQcmltYXJ5IFJvb3QgQ0EwggEiMA0GCSqG
SIb3DQEBAQUAA4IBDwAwggEKAoIBAQCsoPD7gFnUnMekz52hWXMJEEUMDSxuaPFs
W0hoSVk3/AszGcJ3f8wQLZU0HObrTQmnHNK4yZc2AreJ1CRfBsDMRJSUjQJib+ta
3RGNKJpchJAQeg29dGYvajig4tVUROsdB58Hum/u6f1OCyn1PoSgAfGcq/gcfomk
6KHYcWUNo1F77rzSImANuVud37r8UVsLr5iy6S7pBOhih94ryNdOwUxkHt3Ph1i6
Sk/KaAcdHJ1KxtUvkcx8cXIcxcBn6zL9yZJclNqFwJu/U30rCfSMnZEfl2pSy94J
NqR32HuHUETVPm4pafs5SSYeCaWAe0At6+gnhcn+Yf1+5nyXHdWdAgMBAAGjQjBA
MA8GA1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdDgQWBBR7W0XP
r87Lev0xkhpqtvNG61dIUDANBgkqhkiG9w0BAQUFAAOCAQEAeRHAS7ORtvzw6WfU
DW5FvlXok9LOAz/t2iWwHVfLHjp2oEzsUHboZHIMpKnxuIvW1oeEuzLlQRHAd9mz
YJ3rG9XRbkREqaYB7FViHXe4XI5ISXycO1cRrK1zN44veFyQaEfZYGDm/Ac9IiAX
xPcW6cTYcvnIc3zfFi8VqT79aie2oetaupgf1eNNZAqdE8hhuvU5HIe6uL17In/2
/qxAeeWsEG89jxt5dovEN7MhGITlNgDrYyCZuen+MwS7QcjBAvlEYyCegc5C09Y/
LHbTY5xZ3Y+m4Q6gLkH3LpVHz7z9M/P2C2F+fpErgUfCJzDupxBdN49cOSvkBPB7
jVaMaA==
-----END CERTIFICATE-----
EOF
}

cleanup() {
  rm "$cert_file"
}

set_exit_trap() {
  trap cleanup EXIT
}

_curl() {
  curl -s --cacert "$cert_file" "$@"
}

fail() {
  local msg=${1:- failed}
  echo "$msg" >&2
  exit 1
}

usage() {
  cat <<- "USAGE"
$ platform-upgrade [-u URL -s MD5SUM_URL] [-f]

OPTIONS:
  -u URL        : Remote/local url of platform-version.tgz file
  -s MD5SUM_URL : Remote/local url of md5 checksum file
  -f            : Force installation if version is already present

EXAMPLE:
  # Use default Joyent URL for latest platform image
  platform-upgrade
  # Use local platform and checksum file
  platform-upgrade -u file:///tmp/platform-20180510T153535Z.tgz -s file:///tmp/md5sum.txt
USAGE
  exit -1
}

process_cmd_line() {
  force="false"
  local OPTIND option
  while getopts :fu:s: option ; do
    case "$option" in
      u)
        platform_url="$OPTARG"
        ;;
      s)
        md5sums_url="$OPTARG"
        ;;      
      f)
        force="true"
        ;;
      \?)
        usage
        ;;
    esac
  done
  shift $((OPTIND-1))

  boot_device="${1:-}"
}

initialize() {
  : "${platform_url:=}"
  : "${md5sums_url:=}"
  if [[ -n $platform_url ]] && [[ -z $md5sums_url ]]; then
   	usage
  fi
  if [[ -z $platform_url ]]; then
    local host latest_path
    host=https://us-east.manta.joyent.com
    latest_path="${host}$(_curl "$host/Joyent_Dev/public/SmartOS/latest")"
    version="$(expr "$latest_path" : '.*\([0-9]\{8\}T[0-9]\{6\}Z\).*')"
    platform_url="$latest_path/platform-$version.tgz"
    [[ -z $md5sums_url ]] && md5sums_url="$latest_path/md5sums.txt"
  else
    version="$(expr "$platform_url" : '.*\([0-9]\{8\}T[0-9]\{6\}Z\).*')"
  fi
  platform_file="platform-$version.tgz"
  platform_dir="platform-$version"
}

check_kernel_version() {
  IFS=_ read -r _ kernel < <(uname -v)
  if [[ $kernel == "$version" ]]; then
    echo "Already on latest version ($kernel)."
    $force || fail "Exiting"
  fi
}

create_temp_dir() {
  tmp=$(mktemp -d)
  cd "$tmp"
}

download_latest_platform() {
  echo -n "Downloading latest platform ($platform_file)..."
  _curl -o "$platform_file" "$platform_url"
  echo " OK"
}

verify_platform_checksum() {
  echo -n "Verifying checksum..."
  local expected_md5 actual_md5
  expected_md5=$(awk "/$platform_file/ {print \$1}" < <(_curl "$md5sums_url"))
  actual_md5=$(awk '{print $2}' < <(openssl md5 "$platform_file"))
  [[ $actual_md5 == "$expected_md5" ]] || fail
  echo " OK"
}

extract_platform() {
  echo -n "Extracting latest platform..."
  gtar zxf "$platform_file"
  echo " OK"
}

mark_release_version() {
  echo -n "Marking release version..."
  echo "$version" > "$platform_dir"/VERSION
  echo " OK"
}

check_boot_device() {
  echo -n "Checking current boot device..."
  if [[ -z $boot_device ]] ; then
    local removables
    mapfile -t removables < <(awk '/^USB/ { print $2 }' < <(diskinfo -pH))
    if [[ ${#removables[@]} -eq 0 ]]; then
      mapfile -t removables < <(awk '/^USB|^SCSI.*[0-9]+[ \s\t]+yes/ { print $2 }' < <(diskinfo -pH))
    fi
    echo -n " detected ${removables[*]}"
    if [[ ${#removables[@]} -gt 1 ]]; then
      echo
      echo "Error: more than one removable device detected."
      awk 'NR == 1 || /^USB/ { print }' < <(diskinfo)
      fail "Specify correct device on the command line."
    fi
    boot_device="/dev/dsk/${removables[0]}p1"
  else
    echo -n " using $boot_device"
  fi
}

mount_boot_device() {
  if grep "$boot_device" < <(mount -p) ; then
    umount "$boot_device" || fail " failed to unmount $boot_device"
  fi
  mkdir usb
  echo -n ", mounting"
  mount -F pcfs -o foldcase "$boot_device" "$tmp/usb" || fail ", failed to mount $boot_device"

  [[ -d usb/platform ]] || fail ", missing platform dir"
  echo ", OK"
}

update_platform() {
  echo -n "Updating platform on boot device..."
  rsync -a "$platform_dir/" usb/platform.new/
  echo " OK"
}

remount_boot_device() {
  echo -n "Remounting boot device..."
  umount "$boot_device" 2>/dev/null
  mount -F pcfs -o foldcase "$boot_device" "$tmp/usb"
  echo " OK"
}

verify_kernel_checksum() {
  echo -n "Verifying kernel checksum on boot device..."
  local kernel_expected kernel_actual
  kernel_expected=$(cut -d ' ' -f 2 < <(openssl dgst -sha1 "$platform_dir"/i86pc/kernel/amd64/unix))
  kernel_actual=$(cut -d ' ' -f 2 < <(openssl dgst -sha1 usb/platform.new/i86pc/kernel/amd64/unix))
  [[ $kernel_actual == "$kernel_expected" ]] || fail
  echo " OK"
}

verify_boot_archive_checksum() {
  echo -n "Verifying boot_archive checksum on boot device..."
  openssl dgst -sha1 usb/platform.new/i86pc/amd64/boot_archive | cut -d ' ' -f 2 > boot_archive.actual
  cmp -s boot_archive.actual usb/platform.new/i86pc/amd64/boot_archive.hash || fail
  echo " OK"
}

activate_platform() {
  echo -n "Activating new platform on $boot_device..."
  rm -rf usb/old
  mkdir usb/old
  mv usb/platform usb/old && mv usb/platform.new usb/platform
  echo " OK"
}

display_completion_message() {
  echo
  echo "Boot device upgraded. To do:"
  echo
  echo " 1) Sanity check the contents of $tmp/usb"
  echo " 2) umount $boot_device"
  echo " 3) reboot"
}

main "$@"
